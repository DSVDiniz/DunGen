#include "draw.h"

static int aux_dir[][3] = {{0,1,0},{1,1,0},{1,0,0},{1,-1,0},{0,-1,0},{-1,-1,0},{-1,0,0},{-1,1,0}};

int Draw::rngi(int max, int min)
{
	if(max!=min)
	{
		if(max!=0)
			return min+rand() % (max-min);
		else
			return 0;
	}
	else
		return max;
}

void Draw::newSeed(int seed)
{
	srand(seed);
}

std::list <Point<UFINT16> > Draw::getTilePosition(Matriz m, unsigned int t)
{
	std::list<Point<UFINT16> > aux;
	Point<UFINT16> a;
	for(int k = 0;k < TAMZ; ++k)
		for(int j = 0;j < TAMY; ++j)
			for(int i = 0;i < TAMX; ++i)
				if(m[i][j][k]==t)
				{
					a.set(i,j,k,t);
					aux.push_back(a);
				}
	return aux;
}

std::list <Point<UFINT16> > Draw::getTilePosWater(Matriz m)
{
	std::list<Point<UFINT16> > aux;
	Point<UFINT16> a;
	for(int k = 0;k < TAMZ; ++k)
		for(int j = 0;j < TAMY; ++j)
			for(int i = 0;i < TAMX; ++i)
			{
				if((m[i][j][k]>=water1)&&(m[i][j][k]<=water9))
				{
					a.set(i,j,k,m[i][j][k]);
					aux.push_front(a);
				}
			}
	return aux;
}

UFINT8 Draw::get(Matriz m ,int x, int y, int z)
{
	if((x<TAMX)&&(x>0)&&(y<TAMY)&&(y>0)&&(z<TAMZ)&&(z>0))
		return m[x][y][z];
	else
		return 255;
}

UFINT8 Draw::get(Matriz m ,Point<UFINT16> p)
{
	if((p.x<TAMX)&&(p.x>0)&&(p.y<TAMY)&&(p.y>0)&&(p.z<TAMZ)&&(p.z>0))
		return m[p.x][p.y][p.z];
	else
		return 255;
}

void Draw::insert(Matriz m ,int x, int y, int z, int t)
{
	if((x<TAMX)&&(x>0)&&(y<TAMY)&&(y>0)&&(z<TAMZ)&&(z>0))
		m[x][y][z]=t;
}

void Draw::insert(Matriz m ,Point<UFINT16> p)
{
	if((p.x<TAMX)&&(p.x>0)&&(p.y<TAMY)&&(p.y>0)&&(p.z<TAMZ)&&(p.z>0))
		m[p.x][p.y][p.z]=p.t;
}

bool Draw::checkArea(Matriz m, Point<UFINT16>xy, Point<UFINT16>wh, UFINT8 t)
{
	for(UFINT16 k = xy.z;k < wh.z; ++k)
		for(UFINT16 j = xy.y;j < wh.y; ++j)
			for(UFINT16 i = xy.x;i < wh.x; ++i)
			{
				if(m[i][j][k]==t)
				return false;
			}
	return true;
}

bool Draw::checkArea(Matriz m, Point<UFINT16>xy, Point<UFINT16>wh, std::vector<UFINT8> tipos)
{
	for(UFINT16 k = xy.z;k < wh.z; ++k)
		for(UFINT16 j = xy.y;j < wh.y; ++j)
			for(UFINT16 i = xy.x;i < wh.x; ++i)
				for(UFINT8 l = 0;l<tipos.size();++l)
				{
					if(m[i][j][k]==tipos[l])
						return false;
				}
	return true;
}

Point<int>Draw::getHighLow(Matriz m, char eixo)
{
	int high=0, low=0;
	switch (eixo)
	{
		case 'Z':
		case 'z':
			low=TAMZ;
			for(int k = 0;k < TAMZ; ++k)
				for(int j = 0;j < TAMY; ++j)
					for(int i = 0;i < TAMX; ++i)
					{
						if(m[i][j][k]!=air)
						{
							if(k<low)
								low=k;
							if(k>high)
								high=k;
						}
					}
		break;

		case 'Y':
		case 'y':
			low=TAMY;
			for(int k = 0;k < TAMZ; ++k)
				for(int j = 0;j < TAMY; ++j)
					for(int i = 0;i < TAMX; ++i)
					{
						if(m[i][j][k]!=air)
						{
							if(j<low)
								low=j;
							if(j>high)
								high=j;
						}
					}
		break;
		case 'X':
		case 'x':
			low=TAMX;
			for(int k = 0;k < TAMZ; ++k)
				for(int j = 0;j < TAMY; ++j)
					for(int i = 0;i < TAMX; ++i)
					{
						if(m[i][j][k]!=air)
						{
							if(i<low)
								low=i;
							if(i>high)
								high=i;
						}
					}
		break;
	}
	return *new Point<int>(high,low);
}

int Draw::countAlteredPoints(Matriz m)
{
	int sum=0;
	for(int k = 0;k < TAMZ; ++k)
		for(int j = 0;j < TAMY; ++j)
			for(int i = 0;i < TAMX; ++i)
			{
				if(m[i][j][k]!=air)
					++sum;
			}
	return sum;
}


